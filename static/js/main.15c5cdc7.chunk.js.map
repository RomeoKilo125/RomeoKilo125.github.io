{"version":3,"sources":["components/Contact/index.js","components/Header/index.js","components/Navbar/index.js","components/NavItem/index.js","components/DisplayArea/index.js","components/Portfolio/index.js","App.js","serviceWorker.js","index.js"],"names":["Contact","className","href","target","rel","Header","Navbar","props","navToggle","setState","visible","state","nav_class","this","onClick","icon","faBars","children","Component","NavItem","handleClick","item","name","DisplayArea","alt","src","process","pic","bio","url","thumbnail","controls","width","height","description","codeLink","liveLink","Portfolio","Projects","console","log","activeItem","About","id","items","map","e","indexOf","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.15c5cdc7.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css'\n\nfunction Contact() {\n  return (<div className='contact contact-grid'>\n    <div className='contact contact-item'>\n      <a href='https://twitter.com/RomeoKilo125' target='_blank' rel='noreferrer'>\n        <i className=\"fab fa-twitter\"></i>\n      </a>\n    </div>\n    <div className='contact contact-item'>\n      <a href='https://github.com/RomeoKilo125' target='_blank' rel='noreferrer'>\n        <i className=\"fab fa-github\"></i>\n      </a>\n    </div>\n    <div className='contact contact-item'>\n      <a href='https://linkedin.com/in/romeokilo125/' target='_blank' rel='noreferrer'>\n        <i className=\"fab fa-linkedin-in\"></i>\n      </a>\n    </div>\n    <div className='emptySpace'></div>\n    <div className='contact contact-item'>\n      <a href='mailto:RomeoKilo125@gmail.com' target='_blank' rel='noreferrer'>\n        <i className=\"fas fa-envelope\"></i>\n      </a>\n    </div>\n  </div>)\n}\n\nexport default Contact;\n","import React from 'react'\nimport './style.css'\n\nfunction Header() {\n  return (\n    <div className='header header-bar'>\n      <h1 className='header header-item'>RomeoKilo125</h1>\n      <h3 className='header header-item'>C. Ross W. King</h3>\n    </div>)\n}\n\nexport default Header\n","import React, {Component} from 'react'\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport {faBars} from '@fortawesome/free-solid-svg-icons'\n\nimport './style.css'\n\nclass Navbar extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      visible: 'off'\n    }\n  }\n\n  navToggle = () => {\n    this.setState({\n      visible: this.state.visible === 'on'\n        ? 'off'\n        : 'on'\n    })\n  }\n\n  render() {\n    let nav_class = `navbar ${this.state.visible}`\n    return (<div>\n      <div className='nav-icon' onClick={this.navToggle}><FontAwesomeIcon icon={faBars}/></div>\n      <div className={nav_class} onClick={this.navToggle}>{this.props.children}</div>\n    </div>)\n  }\n}\n\nexport default Navbar\n","import React from 'react'\nimport './style.css'\n\nfunction NavItem(props) {\n    return (\n      <div className={props.className} onClick={() => {props.handleClick(props.item)}}>\n          {props.item.name}\n      </div>\n    )\n}\n\nexport default NavItem\n","import React, { Component } from 'react'\nimport ReactPlayer from 'react-player'\nimport './style.css'\n\nclass DisplayArea extends Component {\n  render () {\n    return (\n      this.props.item.name === 'About'\n        ? <div className='display display-about'>\n          <div className='profilePic'>\n            <img className='about-img' alt='Profile Pic' src={process.env.PUBLIC_URL + this.props.item.pic}/>\n          </div>\n          <div className='bio'>{this.props.item.bio}</div>\n        </div>\n        : <div className='display display-project'>\n          <div className='project-name'>{this.props.item.name}</div>\n          <div className='project-thumbnail'>\n            <ReactPlayer className='embedded-video' url={this.props.item.thumbnail} controls=\"controls\" width='100%' height='100%'/>\n          </div>\n          <div className='project-description'>{this.props.item.description}</div>\n          <div className='project-link'>\n            <a target=\"blank\" href={this.props.item.codeLink}>Code Repo</a>\n          </div>\n          {\n            this.props.item.liveLink !== ''\n              ? <div className='project-link'><a target=\"blank\" href={this.props.item.liveLink}>Live Project</a>\n              </div>\n              : ''\n          }\n        </div>)\n  }\n}\n\nexport default DisplayArea\n","import React, {Component} from 'react';\nimport './style.css';\nimport About from '../../data/about.json'\nimport Projects from '../../data/projects.json'\nimport Contact from '../Contact'\nimport Header from '../Header'\nimport Navbar from '../Navbar'\nimport NavItem from '../NavItem'\nimport DisplayArea from '../DisplayArea'\n\nclass Portfolio extends Component {\n  state = {\n    'items': Projects,\n    'activeItem': ''\n  }\n\n  componentDidMount() {\n    this.setState({activeItem: About})\n  }\n\n  handleClick = (item) => {\n    console.log(\"click\")\n    this.setState({activeItem: item})\n  }\n\n  render() {\n    return (<div className=\"Portfolio\">\n      <Contact/>\n      <Header/>\n      <Navbar>\n        <NavItem handleClick={this.handleClick} id=\"about-tag\" item={About} className={About === this.state.activeItem\n          ? 'nav-item about-item active-item'\n          : 'nav-item about-item'}/> {\n            this.state.items.map(e => <NavItem handleClick={this.handleClick} key={this.state.items.indexOf(e)} item={e} className={e === this.state.activeItem\n              ? 'nav-item active-item'\n              : 'nav-item'}/>)\n        }\n      </Navbar>\n      <DisplayArea item={this.state.activeItem}/>\n    </div>);\n  }\n}\n\nexport default Portfolio;\n","import React, {Component} from 'react';\nimport './App.css';\nimport Portfolio from './components/Portfolio'\n\nclass App extends Component {\n  render() {\n    return (<Portfolio/>)\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}