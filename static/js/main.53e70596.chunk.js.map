{"version":3,"sources":["components/Contact/index.js","components/Header/index.js","components/Navbar/index.js","components/NavItem/index.js","components/DisplayArea/index.js","components/Portfolio/index.js","App.js","serviceWorker.js","index.js"],"names":["Contact","react_default","a","createElement","className","href","target","Header","Navbar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","navToggle","setState","visible","state","nav_class","concat","onClick","index_es","icon","faBars","children","Component","NavItem","handleClick","item","name","DisplayArea","alt","src","process","pic","bio","ReactPlayer_default","url","thumbnail","controls","description","codeLink","liveLink","Portfolio","items","Projects","activeItem","console","log","About","_this2","components_Contact","components_Header","components_Navbar","components_NavItem","id","map","e","key","indexOf","components_DisplayArea","App","components_Portfolio","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.53e70596.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css'\n\nfunction Contact() {\n  return (<div className='contact contact-grid'>\n    <div className='contact contact-item'>\n      <a href='https://twitter.com/RomeoKilo125' target='blank'>\n        <i className=\"fab fa-twitter\"></i>\n      </a>\n    </div>\n    <div className='contact contact-item'>\n      <a href='https://github.com/RomeoKilo125' target='blank'>\n        <i className=\"fab fa-github\"></i>\n      </a>\n    </div>\n    <div className='contact contact-item'>\n      <a href='https://linkedin.com/in/romeokilo125/' target='blank'>\n        <i className=\"fab fa-linkedin-in\"></i>\n      </a>\n    </div>\n    <div className='emptySpace'></div>\n    <div className='contact contact-item'>\n      <a href='mailto:RomeoKilo125@gmail.com' target='blank'>\n        <i className=\"fas fa-envelope\"></i>\n      </a>\n    </div>\n  </div>)\n}\n\nexport default Contact;\n","import React from 'react'\nimport './style.css'\n\nfunction Header() {\n  return (\n    <div className='header header-bar'>\n      <h1 className='header header-item'>RomeoKilo125</h1>\n      <h3 className='header header-item'>C. Ross W. King</h3>\n    </div>)\n}\n\nexport default Header\n","import React, {Component} from 'react'\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport {faBars} from '@fortawesome/free-solid-svg-icons'\n\nimport './style.css'\n\nclass Navbar extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      visible: 'off'\n    }\n  }\n\n  navToggle = () => {\n    this.setState({\n      visible: this.state.visible === 'on'\n        ? 'off'\n        : 'on'\n    })\n  }\n\n  render() {\n    let nav_class = `navbar ${this.state.visible}`\n    return (<div>\n      <div className='nav-icon' onClick={this.navToggle}><FontAwesomeIcon icon={faBars}/></div>\n      <div className={nav_class} onClick={this.navToggle}>{this.props.children}</div>\n    </div>)\n  }\n}\n\nexport default Navbar\n","import React from 'react'\nimport './style.css'\n\nfunction NavItem(props) {\n    return (\n      <div className={props.className} onClick={() => {props.handleClick(props.item)}}>\n          {props.item.name}\n      </div>\n    )\n}\n\nexport default NavItem\n","import React, {Component} from 'react'\nimport ReactPlayer from 'react-player'\nimport './style.css'\n\nclass DisplayArea extends Component {\n\n  render() {\n    return (\n      this.props.item.name === 'About'\n      ? <div className='display display-about'>\n        <div className='profilePic'>\n          <img className='about-img' alt='Profile Pic' src={process.env.PUBLIC_URL + this.props.item.pic}/>\n        </div>\n        <div className='bio'>{this.props.item.bio}</div>\n      </div>\n      : <div className='display display-project'>\n        <div className='project-name'>{this.props.item.name}</div>\n        <div className='project-thumbnail'>\n          <ReactPlayer className='embedded-video' url={this.props.item.thumbnail} controls=\"controls\"/>\n        </div>\n        <div className='project-description'>{this.props.item.description}</div>\n        <div className='project-link'>\n          <a target=\"blank\" href={this.props.item.codeLink}>Code Repo</a>\n        </div>\n        {\n          this.props.item.liveLink !== \"\"\n            ? <div className='project-link'><a target=\"blank\" href={this.props.item.liveLink}>Live Project</a>\n            </div>\n            : ''\n        }\n      </div>)\n\n  }\n}\n\nexport default DisplayArea\n","import React, {Component} from 'react';\nimport './style.css';\nimport About from '../../data/about.json'\nimport Projects from '../../data/projects.json'\nimport Contact from '../Contact'\nimport Header from '../Header'\nimport Navbar from '../Navbar'\nimport NavItem from '../NavItem'\nimport DisplayArea from '../DisplayArea'\n\nclass Portfolio extends Component {\n  state = {\n    'items': Projects,\n    'activeItem': ''\n  }\n\n  componentDidMount() {\n    this.setState({activeItem: About})\n  }\n\n  handleClick = (item) => {\n    console.log(\"click\")\n    this.setState({activeItem: item})\n  }\n\n  render() {\n    return (<div className=\"Portfolio\">\n      <Contact/>\n      <Header/>\n      <Navbar>\n        <NavItem handleClick={this.handleClick} id=\"about-tag\" item={About} className={About === this.state.activeItem\n          ? 'nav-item about-item active-item'\n          : 'nav-item about-item'}/> {\n            this.state.items.map(e => <NavItem handleClick={this.handleClick} key={this.state.items.indexOf(e)} item={e} className={e === this.state.activeItem\n              ? 'nav-item active-item'\n              : 'nav-item'}/>)\n        }\n      </Navbar>\n      <DisplayArea item={this.state.activeItem}/>\n    </div>);\n  }\n}\n\nexport default Portfolio;\n","import React, {Component} from 'react';\nimport './App.css';\nimport Portfolio from './components/Portfolio'\n\nclass App extends Component {\n  render() {\n    return (<Portfolio/>)\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}